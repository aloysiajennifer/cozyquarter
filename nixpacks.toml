# Nixpacks.toml

[phases.setup]
# Ensure all necessary packages are installed via Nixpkgs
nixPkgs = [
    "...",                   # Nixpacks will add its default detected packages here
    "python311Packages.supervisor", # For Supervisor itself
    "pkgs.nginx",                   # For Nginx web server
    "pkgs.php82",                   # For PHP CLI (adjust version if needed, e.g., pkgs.php83)
    "pkgs.php82Packages.fpm",       # For PHP-FPM (adjust version if needed)
    "pkgs.nodejs",                  # For the Node.js script `prestart.mjs`
]

[phases.build]
cmds = [
    "mkdir -p /etc/supervisor/conf.d/",
    "cp /assets/worker-*.conf /etc/supervisor/conf.d/",
    "cp /assets/supervisord.conf /etc/supervisord.conf",
    "chmod +x /assets/start.sh",
    "php artisan optimize",      # Add back Laravel optimization commands
    "php artisan view:cache",
    "php artisan config:cache",
    "php artisan route:cache"
    # REMOVE the "..." here - it's not valid TOML syntax for array elements
]

[phases.postbuild]
cmds = [
    "php /app/artisan migrate --force --seed",
    # If you need them back, add "php /app/artisan generate:schedule", etc. here
]
dependsOn = ["build"]

[start]
cmd = '/assets/start.sh' # This is correct, it will execute your custom startup script

# [packages] section is implied to be missing/empty in your latest snippet.
# If you had apt = ["supervisor"] there before, it's fine if it's gone now,
# as we're explicitly using nixPkgs.

[staticAssets]
# Add the prestart.mjs script here, as it's called by start.sh
"scripts/prestart.mjs" = '''
#!/usr/bin/env node

const fs = require('fs');
const templatePath = process.argv[2];
const outputPath = process.argv[3];

if (!templatePath || !outputPath) {
    console.error('Usage: node prestart.mjs <template_path> <output_path>');
    process.exit(1);
}

try {
    let content = fs.readFileSync(templatePath, 'utf8');

    // Replace basic variables that might be in your template
    content = content.replace(/\$\{PORT\}/g, process.env.PORT || '8080');
    content = content.replace(/\$\{NIXPACKS_PHP_ROOT_DIR\}/g, process.env.NIXPACKS_PHP_ROOT_DIR || '/app');
    content = content.replace(/\$\{NIXPACKS_PHP_FALLBACK_PATH\}/g, process.env.NIXPACKS_PHP_FALLBACK_PATH || '/index.php');
    content = content.replace(/\$if\(IS_LARAVEL\)\s*\((.*?)\)\s*else\s*\(\)/gs, (match, p1) => {
        return process.env.IS_LARAVEL === 'true' ? p1 : '';
    });
    // Ensure you handle all variables present in nginx.template.conf if not handled by Nixpacks directly
    // and if your Node script is meant to do this.

    fs.writeFileSync(outputPath, content);
    console.log(`Nginx config transformed from ${templatePath} to ${outputPath}`);
} catch (error) {
    console.error(`Error transforming Nginx config: ${error.message}`);
    process.exit(1);
}
'''

"start.sh" = '''
#!/bin/bash

# Transform the nginx configuration
node /assets/scripts/prestart.mjs /assets/nginx.template.conf /etc/nginx.conf

# Start supervisor
supervisord -c /etc/supervisord.conf -n
'''

"supervisord.conf" = '''
[unix_http_server]
file=/assets/supervisor.sock

[supervisord]
stdout_logfile=/dev/fd/1
stdout_logfile_maxbytes=0
logfile=/var/log/supervisord.log
logfile_maxbytes=50MB
logfile_backups=10
loglevel=debug
pidfile=/assets/supervisord.pid
nodaemon=true
silent=false
minfds=1024
minprocs=200

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///assets/supervisor.sock

[include]
files = /etc/supervisor/conf.d/*.conf
'''

"worker-nginx.conf" = '''
[program:worker-nginx]
process_name=%(program_name)s_%(process_num)02d
command=nginx -c /etc/nginx.conf
autostart=true
autorestart=true
stdout_logfile=/var/log/worker-nginx.log
stderr_logfile=/var/log/worker-nginx.log
'''

"worker-phpfpm.conf" = '''
[program:worker-phpfpm]
process_name=%(program_name)s_%(process_num)02d
command=php-fpm -y /assets/php-fpm.conf -F
autostart=true
autorestart=true
stdout_logfile=/var/log/worker-phpfpm.log
stderr_logfile=/var/log/worker-phpfpm.log
'''

"worker-laravel.conf" = '''
[program:worker-laravel]
process_name=%(program_name)s_%(process_num)02d
command=bash -c 'exec php /app/artisan queue:work --sleep=3 --tries=3 --max-time=3600'
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
numprocs=12 # To reduce memory/CPU usage, change to 2.
startsecs=0
stopwaitsecs=3600
stdout_logfile=/var/log/worker-laravel.log
stderr_logfile=/var/log/worker-laravel.log
'''

"php-fpm.conf" = '''
[www]
listen = 127.0.0.1:9000
user = www-data
group = www-data
listen.owner = www-data
listen.group = www-data
pm = dynamic
pm.max_children = 50
pm.min_spare_servers = 4
pm.max_spare_servers = 32
pm.start_servers = 18
clear_env = no
php_admin_value[post_max_size] = 35M
php_admin_value[upload_max_filesize] = 30M
'''

"nginx.template.conf" = '''
user www-data www-data;
worker_processes 5;
daemon off;

worker_rlimit_nofile 8192;

events {
  worker_connections  4096;  # Default: 1024
}

http {
    include     $!{nginx}/conf/mime.types;
    index     index.html index.htm index.php;

    default_type application/octet-stream;
    log_format   main '$remote_addr - $remote_user [$time_local]   $status '
        '"$request" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx-access.log;
    error_log /var/log/nginx-error.log;
    sendfile     on;
    tcp_nopush   on;
    server_names_hash_bucket_size 128; # this seems to be required for some vhosts

    server {
        listen ${PORT};
        listen [::]:${PORT};
        server_name localhost;

        $if(NIXPACKS_PHP_ROOT_DIR) (
            root ${NIXPACKS_PHP_ROOT_DIR};
        ) else (
            root /app;
        )

        add_header X-Content-Type-Options "nosniff";

        client_max_body_size 35M;
     
        index index.php;
     
        charset utf-8;
     

        $if(NIXPACKS_PHP_FALLBACK_PATH) (
            location / {
                try_files $uri $uri/ ${NIXPACKS_PHP_FALLBACK_PATH}?$query_string;
            }
        ) else (
          location / {
                try_files $uri $uri/ /index.php?$query_string;
           }
        )
     
        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt   { access_log off; log_not_found off; }
     
        $if(IS_LARAVEL) (
            error_page 404 /index.php;
        ) else ()
     
        location ~ \.php$ {
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
            include $!{nginx}/conf/fastcgi_params;
            include $!{nginx}/conf/fastcgi.conf;
        }
     
        location ~ /\.(?!well-known).* {
            deny all;
        }
    }
}
'''


